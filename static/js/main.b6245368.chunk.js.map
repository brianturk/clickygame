{"version":3,"sources":["components/SimpsonCard/index.js","App.js","serviceWorker.js","index.js"],"names":["SimponsCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","state","bgColor","wrong","newgame","clicked","id","console","log","setState","setTimeout","prevProps","_this2","react_default","a","createElement","className","onClick","clickAnimation","onMouseOver","overColor","onMouseLeave","leaveColor","style","backgroundColor","alt","name","src","image","Component","App","newGame","playSimpsonsIntro","score","topScore","selected","simpsons","shuffleArray","newSelected","filter","value","length","push","playHaha","haha","play","simpsonsIntro","arra1","temp","index","ctr","Math","floor","random","href","map","simpson","SimpsonCard","key","ref","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6245368.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass SimponsCard extends Component {\n  constructor(props) {\n    super(props);\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = props.handleClick.bind(this);\n\n    this.state = {\n      bgColor: \"\",\n      wrong: false,\n      newgame: false,\n      clicked: false\n    }\n  }\n\n  clickAnimation(id) {\n    console.log(this.state.bgColor);\n\n    if (!this.state.wrong) {\n      this.setState({\n        bgColor: \"#FFD90F\",\n        clicked: true\n      })\n      setTimeout(function () {\n        this.setState({\n          bgColor: \"#6CADDC\"\n        })\n        this.handleClick(id)\n      }.bind(this), 300);\n    } else {\n      this.handleClick(id)\n    }\n  }\n\n  overColor() {\n    if (!this.state.wrong) {\n      this.setState({\n        bgColor: \"green\"\n      })\n    }\n  }\n\n  leaveColor() {\n    if (!this.state.wrong) {\n      this.setState({\n        bgColor: \"\"\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    // this.fetchData(this.props.userID);\n    if ((prevProps.bgColor === \"red\") && (this.state.wrong) && (this.props.bgColor === \"\")) {\n      this.setState({\n        bgColor: \"\",\n        wrong: false\n      })\n    }\n    if ((this.props.bgColor === \"red\") && (!this.state.wrong)) {\n      if (this.state.clicked) {\n        this.setState({\n          bgColor: this.props.bgColor,\n          wrong: true,\n          clicked: false\n        })\n      } else {\n        this.setState({\n          wrong: true\n        })\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"card\" onClick={() => this.clickAnimation(this.props.id)} onMouseOver={() => this.overColor()} onMouseLeave={() => this.leaveColor()}>\n        <div style={{ backgroundColor: this.state.bgColor }} className=\"img-container\">\n          <img alt={this.props.name} src={this.props.image} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default SimponsCard;\n","import React, { Component } from 'react';\nimport SimpsonsCard from './components/SimpsonCard';\nimport simpsons from \"./simpsons.json\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      score: 0,\n      topScore: 0,\n      simpsons: [],\n      selected: [],\n      bgColor: \"\",\n      newGame: false\n    };\n\n    this.playHaha = () => {\n      this.haha.play();\n    }\n\n    this.playSimpsonsIntro = () => {\n      this.simpsonsIntro.play();\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      simpsons: this.shuffleArray(simpsons)\n    });\n\n    this.playSimpsonsIntro()\n  }\n\n\n  handleClick = (id) => {\n\n    if (this.state.newGame) {\n      this.playSimpsonsIntro()\n\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score\n        });\n      }\n\n      this.setState({\n        bgColor: \"\",\n        newGame: false,\n        selected: [],\n        simpsons: this.shuffleArray(simpsons),\n        score: 0\n      });\n    } else {\n      const newSelected = this.state.selected.filter(value => value !== id);\n\n      if (this.state.selected.length === newSelected.length) {\n        this.state.selected.push(id)\n        this.setState({\n          score: this.state.score + 1\n        });\n\n        this.setState({\n          simpsons: this.shuffleArray(simpsons)\n        });\n      } else {\n        //they messed up\n        this.setState({\n          bgColor: \"red\",\n          newGame: true\n        });\n\n        this.playHaha()\n\n      }\n    }\n  }\n\n  shuffleArray(arra1) {\n    var ctr = arra1.length, temp, index;\n\n    while (ctr > 0) {\n      index = Math.floor(Math.random() * ctr);\n      ctr--;\n      temp = arra1[ctr];\n      arra1[ctr] = arra1[index];\n      arra1[index] = temp;\n    }\n    return arra1;\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navSimpson mb-3\">\n          <div className=\"container\">\n            <span className=\"navbar-brand navSimpsonBrand\" href=\"#\">Simpson's Clicky Game</span>\n\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <span className=\"scoreSimpsons\">\n                  Score <span className=\"scoreBlack\">{this.state.score}</span>Top Score<span className=\"scoreBlack\">{this.state.topScore}</span>\n                </span>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              {this.state.simpsons.map(simpson => (\n                <SimpsonsCard\n                  handleClick={this.handleClick}\n                  image={simpson.image}\n                  id={simpson.id}\n                  key={simpson.id}\n                  name={simpson.name}\n                  bgColor={this.state.bgColor}\n                  newgame={this.state.newGame}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <audio ref={(haha) => { this.haha = haha; }}>\n          <source src=\"./assets/sound/haha.wav\" type=\"audio/mpeg\" >\n          </source>\n        </audio>\n        <audio ref={(simpsonsIntro) => { this.simpsonsIntro = simpsonsIntro; }}>\n          <source src=\"./assets/sound/theSimpsonsIntro.wav\" type=\"audio/mpeg\" >\n          </source>\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}