{"version":3,"sources":["sound/haha.wav","sound/theSimpsonsIntro.wav","sound/bartCoolMan.wav","components/SimpsonCard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SimponsCard","handleClick","_this","props","bind","Object","assertThisInitialized","state","bgColor","wrong","newgame","clicked","id","this","setState","setTimeout","prevProps","_this2","react_default","a","createElement","className","onClick","clickAnimation","onMouseOver","overColor","onMouseLeave","leaveColor","style","backgroundColor","alt","name","src","image","Component","App","score","topScore","simpsons","selected","newGame","playSimpsonsIntro","simpsonsIntro","play","playHaha","haha","playBartCoolMan","bartCoolMan","shuffleArray","newSelected","filter","value","length","push","arra1","temp","index","ctr","Math","floor","random","href","map","simpson","SimpsonCard","key","ref","haHa","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d33af872.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/haha.e8b10595.wav\";","module.exports = __webpack_public_path__ + \"static/media/theSimpsonsIntro.e80c8286.wav\";","module.exports = __webpack_public_path__ + \"static/media/bartCoolMan.f79ad1f6.wav\";","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass SimponsCard extends Component {\n  \n  handleClick = this.props.handleClick.bind(this);\n\n  state = {\n    bgColor: \"\",\n    wrong: false,\n    newgame: false,\n    clicked: false\n  }\n\n  clickAnimation(id) {\n    // console.log(this.state.bgColor);\n\n    if (!this.state.wrong) {\n      this.setState({\n        bgColor: \"#FFD90F\",\n        clicked: true\n      })\n      setTimeout(function () {\n        this.setState({\n          bgColor: \"#6CADDC\"\n        })\n        this.handleClick(id)\n      }.bind(this), 300);\n    } else {\n      this.handleClick(id)\n    }\n  }\n\n  overColor() {\n    if (!this.state.wrong) {\n      this.setState({\n        bgColor: \"green\"\n      })\n    }\n  }\n\n  leaveColor() {\n    if (!this.state.wrong) {\n      this.setState({\n        bgColor: \"\"\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n\n    if (((prevProps.bgColor === \"red\") || (prevProps.bgColor === \"yellow\")) && (this.state.wrong) && (this.props.bgColor === \"\")) {\n      this.setState({\n        bgColor: \"\",\n        wrong: false\n      })\n    }\n\n    if ((this.props.bgColor === \"yellow\") && (!this.state.wrong)) {\n      this.setState({\n        bgColor: this.props.bgColor,\n        wrong: true,\n        clicked: false\n      })\n    }\n\n    if ((this.props.bgColor === \"red\") && (!this.state.wrong)) {\n      if (this.state.clicked) {\n        this.setState({\n          bgColor: this.props.bgColor,\n          wrong: true,\n          clicked: false\n        })\n      } else {\n        this.setState({\n          wrong: true\n        })\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"card\" onClick={() => this.clickAnimation(this.props.id)} onMouseOver={() => this.overColor()} onMouseLeave={() => this.leaveColor()}>\n        <div style={{ backgroundColor: this.state.bgColor }} className=\"img-container\">\n          <img alt={this.props.name} src={this.props.image} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default SimponsCard;\n","import React, { Component } from 'react';\nimport SimpsonsCard from './components/SimpsonCard';\nimport simpsons from \"./simpsons.json\";\nimport haHa from './sound/haha.wav';\nimport simpsonsIntro from './sound/theSimpsonsIntro.wav';\nimport bartCoolMan from './sound/bartCoolMan.wav'\nimport './App.css';\n// import ProgressBar from './ProgressBar'\n\nclass App extends Component {\n  \n  state = {\n    score: 0,\n    topScore: 0,\n    simpsons: [],\n    selected: [],\n    bgColor: \"\",\n    newGame: false\n  };\n\n  playSimpsonsIntro = () => {\n    this.simpsonsIntro.play();\n  }\n\n  playHaha = () => {\n      this.haha.play();\n    }\n\n  playBartCoolMan = () => {\n    this.bartCoolMan.play();\n  }\n\n  componentDidMount() {\n    this.setState({\n      simpsons: this.shuffleArray(simpsons)\n    });\n\n    this.playSimpsonsIntro()\n  }\n\n\n  handleClick = (id) => {\n\n    if (this.state.newGame) {\n      this.playSimpsonsIntro()\n\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score\n        });\n      }\n\n      this.setState({\n        bgColor: \"\",\n        newGame: false,\n        selected: [],\n        simpsons: this.shuffleArray(simpsons),\n        score: 0\n      });\n    } else {\n      const newSelected = this.state.selected.filter(value => value !== id);\n\n      if (this.state.selected.length === newSelected.length) {  //Not a duplicate click\n        this.state.selected.push(id)\n        this.setState({\n          score: this.state.score + 1\n        });\n\n        if (this.state.selected.length === this.state.simpsons.length) {//They got them all \n          this.setState({\n            bgColor: \"yellow\",\n            newGame: true\n          });\n          this.playBartCoolMan()\n        }\n        else {\n          this.setState({\n            simpsons: this.shuffleArray(simpsons)\n          });\n        }\n      } else {   //they messed up\n        this.setState({\n          bgColor: \"red\",\n          newGame: true\n        });\n\n        this.playHaha()\n\n      }\n    }\n  }\n\n  shuffleArray(arra1) {\n    var ctr = arra1.length, temp, index;\n\n    while (ctr > 0) {\n      index = Math.floor(Math.random() * ctr);\n      ctr--;\n      temp = arra1[ctr];\n      arra1[ctr] = arra1[index];\n      arra1[index] = temp;\n    }\n    return arra1;\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navSimpson mb-3\">\n          <div className=\"container\">\n            <span className=\"navbar-brand navSimpsonBrand\" href=\"#\">Simpson's Clicky Game</span>\n\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <span className=\"scoreSimpsons\">\n                  Score <span className=\"scoreBlack\">{this.state.score}</span>Top Score<span className=\"scoreBlack\">{this.state.topScore}</span>\n                </span>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        {/* <ProgressBar percentage={this.state.percentage} /> */}\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              {this.state.simpsons.map(simpson => (\n                <SimpsonsCard\n                  handleClick={this.handleClick}\n                  image={simpson.image}\n                  id={simpson.id}\n                  key={simpson.id}\n                  name={simpson.name}\n                  bgColor={this.state.bgColor}\n                  newgame={this.state.newGame}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <audio ref={(haha) => { this.haha = haha; }}>\n          <source src={haHa} type=\"audio/mpeg\" >\n          </source>\n        </audio>\n        <audio ref={(simpsonsIntro) => { this.simpsonsIntro = simpsonsIntro; }}>\n          <source src={simpsonsIntro} type=\"audio/mpeg\" >\n          </source>\n        </audio>\n        <audio ref={(bartCoolMan) => { this.bartCoolMan = bartCoolMan; }}>\n          <source src={bartCoolMan} type=\"audio/mpeg\" >\n          </source>\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}